var documenterSearchIndex = {"docs":
[{"location":"od/#Interactive-Orbit-Diagram-1","page":"Orbit Diagram","title":"Interactive Orbit Diagram","text":"","category":"section"},{"location":"od/#Docstrings-1","page":"Orbit Diagram","title":"Docstrings","text":"","category":"section"},{"location":"od/#","page":"Orbit Diagram","title":"Orbit Diagram","text":"interactive_orbitdiagram\nscaleod","category":"page"},{"location":"od/#InteractiveChaos.interactive_orbitdiagram","page":"Orbit Diagram","title":"InteractiveChaos.interactive_orbitdiagram","text":"interactive_orbitdiagram(ds::DiscreteDynamicalSystem,\n    i::Int, p_index, p_min, p_max;\n    density = 500, u0 = get_state(ds), Ttr = 200, n = 500,\n    parname = \"p\"\n)\n\nOpen an interactive application for exploring orbit diagrams (ODs) of discrete systems. The functionality works for any discrete system.\n\nOnce initialized it opens a Makie plot window and an Electron control window.\n\nInteraction\n\nBy using the Electron window you are able to update all parameters of the OD interactively (like e.g. n or Ttr). You have to press update after changing these parameters. You can even decide which variable to get the OD for, by choosing one of the variables from the wheel (again, press update afterwards).\n\nIn the Makie window you can interactively zoom into the OD. Click and drag with the left mouse button to select a region in the OD. This region is then re-computed at a higher resolution (i.e. we don't \"just zoom\").\n\nBack in the Electron window, you can press reset to bring the OD in the original state (and variable). Pressing back will go back through the history of your exploration History is stored when any change happens (besides transparency).\n\nAccessing the data\n\nWhat is plotted on the application window is a true orbit diagram, not a plotting shorthand. This means that all data are obtainable and usable directly. Internally we always scale the orbit diagram to [0,1]² (to allow Float64 precision even though plotting is Float32-based). This however means that it is necessary to transform the data in real scale. This is done through the function scaleod which accepts the 5 arguments returned from the current function:\n\nod, pmin, pmax, umin, umax = interactive_orbitdiagram(...)\nps, us = scaleod(od, pmin, pmax, umin, umax)\n\n\n\n\n\n","category":"function"},{"location":"od/#InteractiveChaos.scaleod","page":"Orbit Diagram","title":"InteractiveChaos.scaleod","text":"scaleod(od, pmin, pmax, umin, umax) -> ps, us\n\nGiven the return values of interactive_orbitdiagram, produce orbit diagram data scaled correctly in data units. Return the data as a vector of parameter values and a vector of corresponding variable values.\n\n\n\n\n\n","category":"function"},{"location":"od/#Function-Video-1","page":"Orbit Diagram","title":"Function Video","text":"","category":"section"},{"location":"od/#","page":"Orbit Diagram","title":"Orbit Diagram","text":"using InteractiveChaos, Makie\n\ni = 1\np_index = 1\n\nsystems = [(Systems.logistic(), 3.0, 4.0, \"r\"),\n           (Systems.henon(), 0.8, 1.4, \"a\"),\n           (Systems.standardmap(), 0.6, 1.2, \"k\")]\n\nds, p_min, p_max, parname = systems[1]\n\noddata = interactive_orbitdiagram(\n           ds, i, p_index, p_min, p_max;\n           parname = parname\n         )","category":"page"},{"location":"od/#","page":"Orbit Diagram","title":"Orbit Diagram","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/orbitdiagram.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"od/#Video-Tutorial-1","page":"Orbit Diagram","title":"Video Tutorial","text":"","category":"section"},{"location":"od/#","page":"Orbit Diagram","title":"Orbit Diagram","text":"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/XECr8iyqfDc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"page"},{"location":"highlight/#Trajectory-Highlighter-1","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"","category":"section"},{"location":"highlight/#Docstrings-1","page":"Trajectory Highlighter","title":"Docstrings","text":"","category":"section"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"trajectory_highlighter","category":"page"},{"location":"highlight/#InteractiveChaos.trajectory_highlighter","page":"Trajectory Highlighter","title":"InteractiveChaos.trajectory_highlighter","text":"trajectory_highlighter(datasets, vals; kwargs...)\n\nOpen an interactive application for highlighting specific datasets and properties of these datasets. datasets is a vector of anything from DynamicalSystems.jl that supports plot_dataset (currently Dataset or Matrix). Each dataset corresponds to a specific value from vals (a Vector{<:Real}). The value of vals gives each dataset a specific color based on a colormap.\n\nThe application is composed of two scenes: the left scene plots the datasets, while the right scene plots the histogram of the vals. The function returns the two scenes data_scene, hist_scene.\n\nInteraction\n\nClicking on a bin of the histogram plot will \"highlight\" all data whose value belongs in that bin. Here highlighting actually means \"hidding\" (i.e. reducing their alpha value) all other data besides the ones you want to highlight. Clicking on empty space on the histogram plot will reset highlighting.\n\nClicking on a plotted series in the left window will highlight this series as well as the histogram bin that contains its value. Clicking on empty space will reset the highlighting.\n\nKeyword Arguments\n\nnbins = 10, closed = :left : used in producing the histogram.\nα = 0.05 : the alpha value of the hidden data.\nhα = 0.2 : the alpha value of the hidden histogram bins.\ncmap = :viridis : the colormap used.\nhname = \"value\" : name for the histogram axis.\nkwargs... : Anything else is propagated to plot_dataset.\n\n\n\n\n\n","category":"function"},{"location":"highlight/#Function-Video-1","page":"Trajectory Highlighter","title":"Function Video","text":"","category":"section"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"using InteractiveChaos, Makie\n\nds = Systems.henonheiles()\n\n# Grid of initial conditions at given energy:\nenergy(x,y,px,py) = 0.5(px^2 + py^2) + potential(x,y)\npotential(x, y) = 0.5(x^2 + y^2) + (x^2*y - (y^3)/3)\nfunction generate_ics(E, n)\n    ys = range(-0.4, stop = 1.0, length = n)\n    pys = range(-0.5, stop = 0.5, length = n)\n    ics = Vector{Vector{Float64}}()\n    for y in ys\n        V = potential(0.0, y)\n        V ≥ E && continue\n        for py in pys\n            Ky = 0.5*(py^2)\n            Ky + V ≥ E && continue\n            px = sqrt(2(E - V - Ky))\n            ic = [0.0, y, px, py]\n            push!(ics, [0.0, y, px, py])\n        end\n    end\n    return ics\nend\n\ndensity = 15\ntfinal = 2000.0\ntgali = 1000.0\nE = 0.13\nics = generate_ics(E, density)\n\ntinteg = tangent_integrator(ds, 4)\n\nregularity = Float64[]; psos = Dataset{2, Float64}[]\ntrs = Dataset{3, Float64}[]\n@time for u in ics\n    # compute gali (using advanced usage)\n    reinit!(tinteg, u, orthonormal(4,4))\n    push!(regularity, gali(tinteg, tgali, 1, 1e-12)[2][end]/tgali)\n    push!(psos, poincaresos(ds, (1, 0.0), 2000.0; u0 = u, idxs = [2, 4]))\n    tr = trajectory(ds, 200.0, u)[:, [1, 2, 4]]\n    push!(trs, tr)\nend\n\n# %%\n# 2D version:\ntrajectory_highlighter(psos, regularity; α = 0.05, hname = \"regularity\")\n# 3D version:\ntrajectory_highlighter(trs[1:10:end], regularity[1:10:end];\nnbins = 10, α = 0.05, linewidth = 4.0, hname = \"regularity\")\n","category":"page"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"2D Version:","category":"page"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/highlighter2D.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"3D Version:","category":"page"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/highlighter3D.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"psos/#Interactive-Poincaré-Surface-of-Section-1","page":"Poincaré Surface of Section","title":"Interactive Poincaré Surface of Section","text":"","category":"section"},{"location":"psos/#Docstrings-1","page":"Poincaré Surface of Section","title":"Docstrings","text":"","category":"section"},{"location":"psos/#","page":"Poincaré Surface of Section","title":"Poincaré Surface of Section","text":"interactive_poincaresos","category":"page"},{"location":"psos/#InteractiveChaos.interactive_poincaresos","page":"Poincaré Surface of Section","title":"InteractiveChaos.interactive_poincaresos","text":"interactive_poincaresos(cds, plane, idxs, complete; kwargs...)\n\nOpen an interactive application for exploring a Poincaré surface of section (PSOS) of the continuous dynamical system cds. Return an observable containing the latest initial state created by complete, as well as its color.\n\nThe plane can only be the Tuple type accepted by DynamicalSystems.poincaresos, i.e. (i, r) for the ith variable crossing the value r. idxs gives the two indices of the variables to be displayed, since the PSOS plot is always a 2D scatterplot. I.e. idxs = (1, 2) will plot the 1st versus 2nd variable of the PSOS. It follows that plane[1] ∉ idxs must be true.\n\ncomplete is a three-argument function that completes the new initial state during interactive use, see below.\n\nThe function returns: an observable containing the latest initial state and the scene that is plotted. The scatter plot is scene.children[2].\n\nKeyword Arguments\n\ndirection, rootkw : Same use as in DynamicalSystems.poincaresos.\ntfinal : A 2-element tuple for the range of values for the total integration time (chosen interactively).\nTtr : A 2-element tuple for the range of values for the transient integration time (chosen interactively).\nmarkersizes = (-4, -1) : A 2-element tuple for the range of the marker sizes (which scale exponentially: the actual size is 10.0^markersize).\ncolor : A function of the system's initial condition, that returns a color to plot the new points with. A random color is chosen by default. Notice that for type stability reasons this function must return an instance of RGBf0(red, green, blue).\nlabels = (\"u₁\" , \"u₂\") : Axis labels.\ndiffeq... : Any extra keyword arguments are passed into init of DiffEq.\n\nInteraction\n\nThe application is a standard AbstractPlotting scatterplot, which shows the PSOS of the system, initially using the system's u0. Two sliders control the final evolution time and the size of the marker points.\n\nUpon clicking within the bounds of the scatter plot your click is transformed into a new initial condition, which is further evolved and its PSOS is computed and then plotted into the scatter plot.\n\nYour click is transformed into a full D-dimensional initial condition through the function complete. The first two arguments of the function are the positions of the click on the PSOS. The third argument is the value of the variable the PSOS is defined on. To be more exact, this is how the function is called:\n\nx, y = mouseclick; z = plane[2]\nnewstate = complete(x, y, z)\n\nThe complete function can throw an error for ill-conditioned x, y, z. This will be properly handled instead of breaking the application. This newstate is also given to the function color that gets a new color for the new points.\n\n\n\n\n\n","category":"function"},{"location":"psos/#Function-Video-1","page":"Poincaré Surface of Section","title":"Function Video","text":"","category":"section"},{"location":"psos/#","page":"Poincaré Surface of Section","title":"Poincaré Surface of Section","text":"using InteractiveChaos, Makie\n\nds = Systems.henonheiles()\n\npotential(x, y) = 0.5(x^2 + y^2) + (x^2*y - (y^3)/3)\nenergy(x,y,px,py) = 0.5(px^2 + py^2) + potential(x,y)\nconst E = energy(get_state(ds)...)\n\nfunction complete(y, py, x)\n    V = potential(x, y)\n    Ky = 0.5*(py^2)\n    Ky + V ≥ E && error(\"Point has more energy!\")\n    px = sqrt(2(E - V - Ky))\n    ic = [x, y, px, py]\n    return ic\nend\n\nchaotic = get_state(ds)\nstable = [0., 0.1, 0.5, 0.]\n\nplane = (1, 0.0)\n\npsos = interactive_poincaresos(ds, plane, (2, 4), complete; markersizes = (-5, -1))","category":"page"},{"location":"psos/#","page":"Poincaré Surface of Section","title":"Poincaré Surface of Section","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/interactive_psos.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"psos/#Video-Tutorial-1","page":"Poincaré Surface of Section","title":"Video Tutorial","text":"","category":"section"},{"location":"psos/#","page":"Poincaré Surface of Section","title":"Poincaré Surface of Section","text":"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SozXxa7blJs\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"(Image: InteractiveChaos logo)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"InteractiveChaos is a package that provides applications for interactively exploring dynamical systems. It extends various packages of JuliaDynamics.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"To install it do ]add InteractiveChaos Makie. Makie is necessary for providing a plotting backend, since InteractiveChaos does not install one by default.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The functionality of InteractiveChaos is contained within individual functions, all of which launch a dedicated interactive application. Here is their list:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"interactive_orbitdiagram\ninteractive_poincaresos\ntrajectory_highlighter","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"info: Videos & Animations\nBesides the documentation strings, each interactive function is accompanied with an animation (.gif or .mp4 file) displayed after the docstring, as well as a video tutorial demonstrating its use. See the individual pages for the video links (by clicking the documentation string links)!","category":"page"}]
}
