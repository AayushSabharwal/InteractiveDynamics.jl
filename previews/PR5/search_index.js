var documenterSearchIndex = {"docs":
[{"location":"od/#Interactive-Orbit-Diagram-1","page":"Orbit Diagram","title":"Interactive Orbit Diagram","text":"","category":"section"},{"location":"od/#","page":"Orbit Diagram","title":"Orbit Diagram","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/orbitdiagram.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"od/#","page":"Orbit Diagram","title":"Orbit Diagram","text":"interactive_orbitdiagram\nscaleod","category":"page"},{"location":"od/#InteractiveChaos.interactive_orbitdiagram","page":"Orbit Diagram","title":"InteractiveChaos.interactive_orbitdiagram","text":"interactive_orbitdiagram(ds::DiscreteDynamicalSystem,\n    i::Int, p_index, p_min, p_max;\n    density = 500, u0 = get_state(ds), Ttr = 200, n = 500,\n    parname = \"p\"\n)\n\nOpen an interactive application for exploring orbit diagrams (ODs) of discrete systems. The functionality works for any discrete system.\n\nOnce initialized it opens a Makie plot window and an Electron control window.\n\nInteraction\n\nBy using the Electron window you are able to update all parameters of the OD interactively (like e.g. n or Ttr). You have to press update after changing these parameters. You can even decide which variable to get the OD for, by choosing one of the variables from the wheel (again, press update afterwards).\n\nIn the Makie window you can interactively zoom into the OD. Click and drag with the left mouse button to select a region in the OD. This region is then re-computed at a higher resolution (i.e. we don't \"just zoom\").\n\nBack in the Electron window, you can press reset to bring the OD in the original state (and variable). Pressing back will go back through the history of your exploration History is stored when any change happens (besides transparency).\n\nAccessing the data\n\nWhat is plotted on the application window is a true orbit diagram, not a plotting shorthand. This means that all data are obtainable and usable directly. Internally we always scale the orbit diagram to [0,1]² (to allow Float64 precision even though plotting is Float32-based). This however means that it is necessary to transform the data in real scale. This is done through the function scaleod which accepts the 5 arguments returned from the current function:\n\nod, pmin, pmax, umin, umax = interactive_orbitdiagram(...)\nps, us = scaleod(od, pmin, pmax, umin, umax)\n\n\n\n\n\n","category":"function"},{"location":"od/#InteractiveChaos.scaleod","page":"Orbit Diagram","title":"InteractiveChaos.scaleod","text":"scaleod(od, pmin, pmax, umin, umax) -> ps, us\n\nGiven the return values of interactive_orbitdiagram, produce orbit diagram data scaled correctly in data units. Return the data as a vector of parameter values and a vector of corresponding variable values.\n\n\n\n\n\n","category":"function"},{"location":"highlight/#Trajectory-Highlighter-1","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"","category":"section"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"trajectory_highlighter","category":"page"},{"location":"highlight/#InteractiveChaos.trajectory_highlighter","page":"Trajectory Highlighter","title":"InteractiveChaos.trajectory_highlighter","text":"trajectory_highlighter(datasets, vals; kwargs...)\n\nOpen an interactive application for highlighting specific datasets and properties of these datasets. datasets is a vector of anything from DynamicalSystems.jl that supports plot_dataset (currently Dataset or Matrix). Each dataset corresponds to a specific value from vals (a Vector{<:Real}). The value of vals gives each dataset a specific color based on a colormap.\n\nThe application is composed of two scenes: the left scene plots the datasets, while the right scene plots the histogram of the vals. The function returns the two scenes data_scene, hist_scene.\n\nInteraction\n\nClicking on a bin of the histogram plot will \"highlight\" all data whose value belongs in that bin. Here highlighting actually means \"hidding\" (i.e. reducing their alpha value) all other data besides the ones you want to highlight. Clicking on empty space on the histogram plot will reset highlighting.\n\nClicking on a plotted series in the left window will highlight this series as well as the histogram bin that contains its value. Clicking on empty space will reset the highlighting.\n\nKeyword Arguments\n\nnbins = 10, closed = :left : used in producing the histogram.\nα = 0.05 : the alpha value of the hidden data.\nhα = 0.2 : the alpha value of the hidden histogram bins.\ncmap = :viridis : the colormap used.\nhname = \"value\" : name for the histogram axis.\nkwargs... : Anything else is propagated to plot_dataset.\n\n\n\n\n\n","category":"function"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"2D Version:","category":"page"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/highlighter2D.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"3D Version:","category":"page"},{"location":"highlight/#","page":"Trajectory Highlighter","title":"Trajectory Highlighter","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/highlighter3D.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"billiards/#Interactive-Billiards-1","page":"Interactive Billiards","title":"Interactive Billiards","text":"","category":"section"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/bill2.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"interactive_billiard","category":"page"},{"location":"billiards/#InteractiveChaos.interactive_billiard","page":"Interactive Billiards","title":"InteractiveChaos.interactive_billiard","text":"interactive_billiard(bd::Billiard [, x, y, φ] [, ω=nothing]; kwargs...)\ninteractive_billiard(bd::Billiard, ps::Vector{<:AbstractParticle}; kwargs...)\n\nLaunch an interactive application that evolves particles in a dynamical billiard bd, using DynamicalBilliards.jl. You can either specify exactly the particles that will be used ps or provide some initial conditions x,y,φ,ω, which by default are random in the billiard.\n\nThe particles are evolved in real time instead of being pre-calculated, so the application can be left to run for infinite time.\n\nSee also interactive_billiard_bmap and billiard_video.\n\nInteraction\n\nPush \"play\" to start evolving particles in the billiard, and \"reset\" to restore them to their (latest) initial condition. The \"particles\" hides or shows the particles. The \"speed\" slider controls the animation speed (in fact, it controls how often are the plots updated).\n\nClicking and dragging inside the billiard plot shows a line. When the line is selected, new particles are created that have the direction of this line, as well as its starting position, using the function particlebeam from DynamicalBilliards.\n\nFurther keywords\n\nN = 100 : if exact particles are not given, N are created. Otherwise it is length(ps).\ndx = 0.01 : width of the particle beam.\ndt = 0.001 : time resolution of the animation.\ntail = 1000 : length of the tail of the particles (multiplies dt).\ncolors = JULIADYNAMICS_COLORS : If a symbol (colormap name) each particle gets a color from the map. If Vector of length N, each particle gets a color form the vector. If Vector with length < N, linear interpolation across contained colors is done.\nfade = true : Whether to add fadeout to the particle tail.\nsleept = nothing : If the slowest speed of the animation is already too fast, give a small number to sleept.\nplot_particles = true : If false, the particles are not plotted (as balls and arrows). This makes the application faster (you cannot show them again with the button).\n\n\n\n\n\n","category":"function"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"","category":"page"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/bill1.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"","category":"page"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"billiard_video","category":"page"},{"location":"billiards/#InteractiveChaos.billiard_video","page":"Interactive Billiards","title":"InteractiveChaos.billiard_video","text":"billiard(file, bd::Billiard [, x, y, φ] [, ω=nothing]; kwargs...)\nbilliard(file, bd::Billiard, ps::Vector{<:AbstractParticle}; kwargs...)\n\nPerform the same animation like in interactive_billiard, but there is no interaction; the result is saved directly as a video in file (no buttons are shown).\n\nKeywords\n\nN, dt, tail, dx, colors, plot_particles, fade: same as interactive_billiard, but with a bit \"denser\" defaults. plot_particles is false by default here.\nspeed = 4: Animation \"speed\" (how many dt steps are taken before a frame is recorded)\nframes = 1000: amount of frames to record.\nframerate = 60: exported framerate.\nbackgroundcolor = RGBf0(0.99, 0.99, 0.99).\nres = nothing: resolution of the frames. If nothing, a resolution matching the the billiard aspect ratio is estimated. Otherwise pass a 2-tuple.\n\n\n\n\n\n","category":"function"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"Here is a video in the style of 3Blue1Brown","category":"page"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/3b1billiard.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"","category":"page"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"interactive_billiard_bmap","category":"page"},{"location":"billiards/#InteractiveChaos.interactive_billiard_bmap","page":"Interactive Billiards","title":"InteractiveChaos.interactive_billiard_bmap","text":"interactive_billiard_bmap(bd::Billiard, ω=nothing; kwargs...)\n\nLaunch an interactive application whose left part is interactive_billiard and whose write part is an interactive boundary map of the billiard (see \"Phase spaces\" in DynamicalBilliards.jl).\n\nA particle evolved in the real billiard is also shown on the boundary map. All interaction of the billiard works as before, but there is also interaction in the boundary map: clicking on it will generate a particle whose boundary map is the clicked point.\n\nThe mean collision time \"m.c.t.\" of the particle is shown as well.\n\nKeywords\n\nnewcolor = randomcolor A function which takes as input (pos, vel, ξ, sφ) and outputs a color (for the scatter points in the boundary map).\nms = 12 markersize (in pixels).\ndt, tail, sleept, fade : propagated to interactive_billiard.\n\n\n\n\n\n","category":"function"},{"location":"billiards/#","page":"Interactive Billiards","title":"Interactive Billiards","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/bmap.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"(Image: InteractiveChaos logo)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"InteractiveChaos is a package that provides applications for interactively exploring dynamical systems. It extends various packages of JuliaDynamics.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"To install it do ]add InteractiveChaos Makie. Makie is necessary for providing a plotting backend, since InteractiveChaos does not install one by default.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The functionality of InteractiveChaos is contained within individual functions, all of which launch a dedicated interactive application. Here is their list:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"interactive_orbitdiagram\ninteractive_poincaresos\ntrajectory_highlighter\ninteractive_billiard","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"info: Example animations\nBesides the documentation strings, each interactive function is accompanied with an animation (.gif or .mp4 file) displayed after the docstring! All of these animations are generated by simply running examples from the  examples folder. Some of these applications are potentially used in the JuliaDynamics YouTube channel","category":"page"},{"location":"psos/#Interactive-Poincaré-Surface-of-Section-1","page":"Poincaré Surface of Section","title":"Interactive Poincaré Surface of Section","text":"","category":"section"},{"location":"psos/#","page":"Poincaré Surface of Section","title":"Poincaré Surface of Section","text":"<video width=\"100%\" height=\"auto\" controls autoplay loop>\n<source src=\"https://raw.githubusercontent.com/JuliaDynamics/JuliaDynamics/master/videos/interact/interactive_psos.mp4?raw=true\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"psos/#","page":"Poincaré Surface of Section","title":"Poincaré Surface of Section","text":"interactive_poincaresos","category":"page"},{"location":"psos/#InteractiveChaos.interactive_poincaresos","page":"Poincaré Surface of Section","title":"InteractiveChaos.interactive_poincaresos","text":"interactive_poincaresos(cds, plane, idxs, complete; kwargs...)\n\nLaunch an interactive application for exploring a Poincaré surface of section (PSOS) of the continuous dynamical system cds using poincaresos from DynamicalSystems.jl.\n\nThe plane can only be the Tuple type accepted by DynamicalSystems.poincaresos, i.e. (i, r) for the ith variable crossing the value r. idxs gives the two indices of the variables to be displayed, since the PSOS plot is always a 2D scatterplot. I.e. idxs = (1, 2) will plot the 1st versus 2nd variable of the PSOS. It follows that plane[1] ∉ idxs must be true.\n\ncomplete is a three-argument function that completes the new initial state during interactive use, see below.\n\nThe function returns: an observable containing the latest initial state and the scene.\n\nKeyword Arguments\n\ndirection, rootkw : Same use as in DynamicalSystems.poincaresos.\ntfinal = (1000.0, 10.0^4) : A 2-element tuple for the range of values for the total integration time (chosen interactively).\ncolor : A function of the system's initial condition, that returns a color to plot the new points with. The color must be RGBf0/RGBAf0.  A random color is chosen by default.\nlabels = (\"u₁\" , \"u₂\") : Axis labels (you can change them youself ax.xlabel = ...)\nscatterkwargs = (): Named tuple of keywords passed to scatter.\ndiffeq... : Any extra keyword arguments are passed into init of DiffEq.\n\nInteraction\n\nThe application is a standard scatterplot, which shows the PSOS of the system, initially using the system's u0. Two sliders control the total evolution time and the size of the marker points (which is always in pixels).\n\nUpon clicking within the bounds of the scatter plot your click is transformed into a new initial condition, which is further evolved and its PSOS is computed and then plotted into the scatter plot.\n\nYour click is transformed into a full D-dimensional initial condition through the function complete. The first two arguments of the function are the positions of the click on the PSOS. The third argument is the value of the variable the PSOS is defined on. To be more exact, this is how the function is called:\n\nx, y = mouseclick; z = plane[2]\nnewstate = complete(x, y, z)\n\nThe complete function can throw an error for ill-conditioned x, y, z. This will be properly handled instead of breaking the application. This newstate is also given to the function color that gets a new color for the new points.\n\n\n\n\n\n","category":"function"}]
}
